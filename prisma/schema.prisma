// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  uid        String   @id @default(uuid())
  uname      String   @unique
  password   String
  status     String   @default("View")
  email      String   @unique
  ppict      String?  @default("profil/Default.JPG")
  location   String?
  whatsapp   String?
  instagram  String?
  user_job   String?
  user_desc  String?
  created_at DateTime @default(now())
  isdelete   Boolean  @default(false)
  pending_delete_until DateTime?

  portofolio portofolio[]
  refreshToken RefreshToken?
  requestStatuses RequestStatus[]

  comments_given comments[] @relation("Pemberi")
  comments_received  comments[] @relation("Penerima")
}

model comments {
  comment_id   String   @id @default(uuid())
  pemberi_uid  String
  penerima_uid String
  isi_komentar String
  created_at   DateTime @default(now())
  isdelete     Boolean  @default(false)

  // relasi ke user sebagai pemberi dan penerima
  pemberi  user @relation("Pemberi", fields: [pemberi_uid], references: [uid], onDelete: Cascade)
  penerima user @relation("Penerima", fields: [penerima_uid], references: [uid], onDelete: Cascade)
}

model portofolio {
  porto_id   String   @id @default(uuid())
  uid        String
  cover      String?
  judul      String
  kategori   String
  description String?
  created_at DateTime @default(now())
  isdelete   Boolean  @default(false)

  user     user       @relation(fields: [uid], references: [uid], onDelete: Cascade)
  furnitur furnitur[]
}

model furnitur {
  furnitur_id         String  @id @default(uuid())
  porto_id            String
  nama_furnitur       String
  foto_furnitur       String?
  keterangan_furnitur String?
  jumlah              Int?

  portofolio portofolio @relation(fields: [porto_id], references: [porto_id], onDelete: Cascade)
}

model RequestStatus {
  id               String   @id @default(uuid())
  userId           String
  requestStatement String // contoh: "view_to_post"
  approvalStatus   Boolean @default(false)
  createdAt        DateTime @default(now())

  user user @relation(fields: [userId], references: [uid], onDelete: Cascade)
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  token     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user user @relation(fields: [userId], references: [uid], onDelete: Cascade)
}
